import os
import json

class Producto:
    def __init__(self, id_producto, nombre, cantidad, precio):
        self.id_producto = id_producto
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    def to_dict(self):
        return {
            "id_producto": self.id_producto,
            "nombre": self.nombre,
            "cantidad": self.cantidad,
            "precio": self.precio
        }

class Inventario:
    ARCHIVO_INVENTARIO = "inventario.txt"
    
    def __init__(self):
        self.productos = {}
        self.cargar_desde_archivo()

    def cargar_desde_archivo(self):
        """Carga los productos desde el archivo al iniciar el programa."""
        try:
            if os.path.exists(self.ARCHIVO_INVENTARIO):
                with open(self.ARCHIVO_INVENTARIO, "r", encoding="utf-8") as archivo:
                    contenido = archivo.read()
                    if contenido:
                        datos = json.loads(contenido)
                        self.productos = {p["id_producto"]: Producto(**p) for p in datos}
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"Error al cargar el inventario: {e}")
        except PermissionError:
            print("No se tienen permisos para leer el archivo de inventario.")
    
    def guardar_en_archivo(self):
        """Guarda el inventario en un archivo de texto."""
        try:
            with open(self.ARCHIVO_INVENTARIO, "w", encoding="utf-8") as archivo:
                json.dump([p.to_dict() for p in self.productos.values()], archivo, indent=4)
        except PermissionError:
            print("No se tienen permisos para escribir en el archivo de inventario.")
    
    def agregar_producto(self, id_producto, nombre, cantidad, precio):
        """Añade un nuevo producto al inventario y lo guarda en el archivo."""
        if id_producto in self.productos:
            print("El producto ya existe.")
            return
        self.productos[id_producto] = Producto(id_producto, nombre, cantidad, precio)
        self.guardar_en_archivo()
        print("Producto agregado exitosamente.")
    
    def actualizar_producto(self, id_producto, cantidad, precio):
        """Actualiza la cantidad y el precio de un producto existente."""
        if id_producto not in self.productos:
            print("El producto no existe.")
            return
        self.productos[id_producto].cantidad = cantidad
        self.productos[id_producto].precio = precio
        self.guardar_en_archivo()
        print("Producto actualizado exitosamente.")
    
    def eliminar_producto(self, id_producto):
        """Elimina un producto del inventario."""
        if id_producto not in self.productos:
            print("El producto no existe.")
            return
        del self.productos[id_producto]
        self.guardar_en_archivo()
        print("Producto eliminado exitosamente.")
    
    def mostrar_inventario(self):
        """Muestra el inventario completo."""
        if not self.productos:
            print("El inventario está vacío.")
            return
        for p in self.productos.values():
            print(f"ID: {p.id_producto}, Nombre: {p.nombre}, Cantidad: {p.cantidad}, Precio: {p.precio}")

if __name__ == "__main__":
    inventario = Inventario()
    while True:
        print("\nGestión de Inventario")
        print("1. Agregar Producto")
        print("2. Actualizar Producto")
        print("3. Eliminar Producto")
        print("4. Mostrar Inventario")
        print("5. Salir")
        opcion = input("Seleccione una opción: ")
        
        if opcion == "1":
            id_producto = input("ID del Producto: ")
            nombre = input("Nombre del Producto: ")
            cantidad = int(input("Cantidad: "))
            precio = float(input("Precio: "))
            inventario.agregar_producto(id_producto, nombre, cantidad, precio)
        elif opcion == "2":
            id_producto = input("ID del Producto a actualizar: ")
            cantidad = int(input("Nueva Cantidad: "))
            precio = float(input("Nuevo Precio: "))
            inventario.actualizar_producto(id_producto, cantidad, precio)
        elif opcion == "3":
            id_producto = input("ID del Producto a eliminar: ")
            inventario.eliminar_producto(id_producto)
        elif opcion == "4":
            inventario.mostrar_inventario()
        elif opcion == "5":
            print("Saliendo del sistema de gestión de inventario.")
            break
        else:
            print("Opción no válida. Intente de nuevo.")
